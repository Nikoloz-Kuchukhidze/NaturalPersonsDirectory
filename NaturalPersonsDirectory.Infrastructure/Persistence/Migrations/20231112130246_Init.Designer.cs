// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaturalPersonsDirectory.Infrastructure.Persistence.Contexts;

#nullable disable

namespace NaturalPersonsDirectory.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231112130246_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("MinLength", 2)
                        .HasAnnotation("RegularExpression", "^[a-zA-Z ა-ჰ]+$");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("MinLength", 2)
                        .HasAnnotation("RegularExpression", "^[a-zA-Z ა-ჰ]+$");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("NaturalPersons", (string)null);
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.NaturalPersonRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("NaturalPersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedNaturalPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NaturalPersonId");

                    b.HasIndex("RelatedNaturalPersonId");

                    b.ToTable("NaturalPersonRelations", (string)null);
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.Phone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("NaturalPersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("MinLength", 4);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NaturalPersonId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Phones", (string)null);
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", b =>
                {
                    b.HasOne("NaturalPersonsDirectory.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.NaturalPersonRelation", b =>
                {
                    b.HasOne("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("Relations")
                        .HasForeignKey("NaturalPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", "RelatedNaturalPerson")
                        .WithMany()
                        .HasForeignKey("RelatedNaturalPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NaturalPerson");

                    b.Navigation("RelatedNaturalPerson");
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.Phone", b =>
                {
                    b.HasOne("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", "NaturalPerson")
                        .WithMany("Phones")
                        .HasForeignKey("NaturalPersonId");

                    b.Navigation("NaturalPerson");
                });

            modelBuilder.Entity("NaturalPersonsDirectory.Domain.Entities.NaturalPerson", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("Relations");
                });
#pragma warning restore 612, 618
        }
    }
}
